@page "/get-post-by-id/{PostId:int}"


@if (_post != null)
{
    <div class="w3-container w3-red">
        <h1>@_post.Title</h1>
        @if (isMyBlog)
        {
            <button class="btn btn-primary">Edit Title</button>
            <button class="btn btn-secondary" id="myBtn">Add Content</button>
            <button class="btn btn-secondary">Add Photo</button>
            <button class="btn btn-danger">Delete Post</button>
        }
    </div>

    //<img src="img_car.jpg" alt="Car" style="width:100%">

    @if (_post.Contents?.Count > 0 || _post.Contents != null)
    {

        @for (int i = 0; i < _post.Contents.Count; i++)
        {
            <div class="w3-container">
                <p>@_post.Contents[i]</p>
            </div>
            if (i < _post.PhotoList?.Count && (_post.PhotoList.Count > 0 || _post?.PhotoList != null))
            {
                <div class="w3-container">
                    <img src="@_post.PhotoList[i].PhotoUrl"/>
                </div>
            }
        }
    }


    <div class="w3-container w3-red">
        <h5>@_post.AuthorFullName</h5>
    </div>

}
else
{
    <ErrorDisplay ErrorMessage="@errorMessage"></ErrorDisplay>
}



<button id="myBtn">Open Modal</button>
<!-- The Modal -->
<div id="myModal" class="modal">

    <!-- Modal content -->
    <div class="modal-content">
        <span class="close">&times;</span>
        <p>Some text in the Modal..</p>
    </div>

</div>


@code {

    [Parameter] public int PostId { get; set; }

    PostDto? _post;
    private string? errorMessage;
    private bool check;
    private BlogDto Blog { get; set; }

    private Guid _userId { get; set; }
    private bool isMyBlog { get; set; }
    protected override async Task OnInitializedAsync()
    {
        (_post, errorMessage, check) = await PostIntegration.GetPostById(PostId);
        _userId = await UserSettings.GetUserId();
        (Blog,errorMessage,check) = await BlogIntegration.GetMyBlogById(_userId,_post!.BlogId);
        isMyBlog = _userId == Blog?.UserId;
    }

}
<style>
    body {
        font-family: Arial, Helvetica, sans-serif;
    }

    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    /* The Close Button */
    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
</style>

    
<script>
// Get the modal
var modal = document.getElementById("myModal");

// Get the button that opens the modal
var btn = document.getElementById("myBtn");

// Get the <span> element that closes the modal
var span = document.getElementsByClassName("close")[0];

// When the user clicks the button, open the modal 
btn.onclick = function() {
  modal.style.display = "block";
}

// When the user clicks on <span> (x), close the modal
span.onclick = function() {
  modal.style.display = "none";
}

// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
}
</script>