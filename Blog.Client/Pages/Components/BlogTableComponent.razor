@foreach (var blog in Blogs)
{
    <div class="col-md-3 mb-2">
        <a href="@GetHref(blog.Id)">
            <div class="card">
                <img class="img-thumbnail" src="https://img.freepik.com/free-photo/online-message-blog-chat-communication-envelop-graphic-icon-concept_53876-139717.jpg" @*src="@blog.ImageURL" *@ />
                <div class="card-body">
                    <h5 class="card-title mb-3">
                        @blog.Name
                    </h5>
                    <p class="description" id="description">
                        <b>@blog.Description</b>
                    </p>
                    <p class="card-text">
                        @GetAuthorName(blog.UserId)
                    </p>
                </div>
            </div>
        </a>
    </div>
}


@code {

    [Parameter] public List<BlogDto> Blogs { get; set; }
    [Parameter] public bool IsMyBlog { get; set; }

    private string _href { get; set; }

    private Dictionary<Guid, string> AuthorNames = new Dictionary<Guid, string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthorNamesAsync();
        
    }

    private string GetHref(int blogId)
    {
        if (IsMyBlog)
        {
          return  _href = $"/getMyBlogById/{blogId}";
        }

        return  _href = $"get-not-related-blog-by-id/{blogId}";
    }

    private async Task LoadAuthorNamesAsync()
    {
        foreach (var blog in Blogs)
        {
            if (!AuthorNames.ContainsKey(blog.UserId))
            {
                var authorName = await GetAuthorFullnameAsync(blog.UserId);
                AuthorNames[blog.UserId] = authorName;
            }
        }
    }

    private string GetAuthorName(Guid userId)
    {
        return AuthorNames.GetValueOrDefault(userId, "Loading...");
    }

    private async Task<string> GetAuthorFullnameAsync(Guid authorId)
    {
        var author = await UserIntegration.GetUserById(authorId);
        return $"{author?.Firstname} {author?.Lastname}";
    }
}
